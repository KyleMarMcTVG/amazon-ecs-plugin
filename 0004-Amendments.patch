From a52e4b4a7f07678d0d155f0d4a9e0c87d24806fb Mon Sep 17 00:00:00 2001
From: Kyle Martineau-McFarlane <kyle.martineau-mcfarlane@theverygroup.com>
Date: Fri, 6 May 2022 11:40:32 +0100
Subject: [PATCH 4/4] Amendments

---
 .../jenkins/plugins/amazonecs/ECSService.java | 22 +++++++++++++++++++
 .../jenkins/plugins/amazonecs/ECSSlave.java   | 11 +++++++---
 2 files changed, 30 insertions(+), 3 deletions(-)

diff --git a/src/main/java/com/cloudbees/jenkins/plugins/amazonecs/ECSService.java b/src/main/java/com/cloudbees/jenkins/plugins/amazonecs/ECSService.java
index d462e0a..006b6bd 100644
--- a/src/main/java/com/cloudbees/jenkins/plugins/amazonecs/ECSService.java
+++ b/src/main/java/com/cloudbees/jenkins/plugins/amazonecs/ECSService.java
@@ -28,6 +28,7 @@ package com.cloudbees.jenkins.plugins.amazonecs;
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.List;
 import java.util.function.Supplier;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -393,6 +394,27 @@ public class ECSService extends BaseAWSService {
         }
     }
 
+    /**
+     * Finds the task definition for the specified family or ARN, or null if none is found.
+     * The parameter may be a task definition family, family with revision, or full task definition ARN.
+     */
+    List<Tag> listTagsForResource(String resourceArn) {
+        AmazonECS client = clientSupplier.get();
+
+        try {
+            ListTagsForResourceResult result = client.listTagsForResource(
+                    new ListTagsForResourceRequest().withResourceArn(resourceArn)
+            );
+
+            return result.getTags();
+        } catch (ClientException e) {
+            LOGGER.log(Level.FINE, "No existing resource found for ARN: " + resourceArn, e);
+            LOGGER.log(Level.INFO, "No existing resource found for ARN: " + resourceArn);
+
+            return null;
+        }
+    }
+
     private String fullQualifiedTemplateName(final String cloudName, final ECSTaskTemplate template) {
         return cloudName.replaceAll("\\s+", "") + '-' + template.getTemplateName();
     }
diff --git a/src/main/java/com/cloudbees/jenkins/plugins/amazonecs/ECSSlave.java b/src/main/java/com/cloudbees/jenkins/plugins/amazonecs/ECSSlave.java
index 3247cca..ab884f9 100644
--- a/src/main/java/com/cloudbees/jenkins/plugins/amazonecs/ECSSlave.java
+++ b/src/main/java/com/cloudbees/jenkins/plugins/amazonecs/ECSSlave.java
@@ -170,17 +170,20 @@ public class ECSSlave extends AbstractCloudSlave {
     }
 
     public boolean isPermittedUrl(String jobUrl) {
-        Task task = cloud.getEcsService().describeTask(taskArn, clusterArn);
-        List<Tag> tags = task.getTags();
+        List<Tag> tags = cloud.getEcsService().listTagsForResource(taskDefinitonArn);
 
         boolean weHaveJobPrefixRestrictions = false;
 
         // check the tags for ones which we want; if we match any, allow the build
         for (Tag tag: tags) {
+            LOGGER.log(Level.INFO, "[{0}]: Checking tag {1}={2}", new Object[]{this.getNodeName(), tag.getKey(), tag.getValue()});
             if (tag.getKey().startsWith("JENKINS_JOB_PREFIX_")) {
+                LOGGER.log(Level.INFO, "[{0}]: tag {1} starts with JENKINS_JOB_PREFIX_ so we have job prefix restrictions", new Object[]{this.getNodeName(), tag.getKey()});
                 weHaveJobPrefixRestrictions = true;
                 String restrictedPrefix = tag.getValue().replace("@", "%");
+                LOGGER.log(Level.INFO, "[{0}]: tag {1} has restricted prefix [{2}]", new Object[]{this.getNodeName(), tag.getKey(), restrictedPrefix});
                 if (jobUrl.startsWith(restrictedPrefix)) {
+                    LOGGER.log(Level.INFO, "[{0}]: tag {1} has restricted prefix [{2}], jobUrl [{3}] starts with it, approve", new Object[]{this.getNodeName(), tag.getKey(), restrictedPrefix, jobUrl});
                     return true;
                 }
             }
@@ -189,11 +192,13 @@ public class ECSSlave extends AbstractCloudSlave {
         // if we are here, there are tags. If any matched the prefix we
         // want and we are here, our job isn't a match
         if (weHaveJobPrefixRestrictions) {
+            LOGGER.log(Level.INFO, "[{0}]: job restrictions found but none match", new Object[]{this.getNodeName()});
             return false;
         }
 
         // there are tags but not ones of interest OR there are no tags
-        return false;
+        LOGGER.log(Level.INFO, "[{0}]: job restrictions not found, so permit this task", new Object[]{this.getNodeName()});
+        return true;
     }
 
     public void abortBuild() {
-- 
2.30.2

