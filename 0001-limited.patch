From 7f3696fd5926e137bdb96c575386993c1090f3d3 Mon Sep 17 00:00:00 2001
From: Kyle Martineau-McFarlane <kyle.martineau-mcfarlane@theverygroup.com>
Date: Wed, 27 Apr 2022 14:07:09 +0100
Subject: [PATCH 1/4] limited

---
 .../plugins/amazonecs/ECSComputer.java        |  9 +++++
 .../jenkins/plugins/amazonecs/ECSSlave.java   | 33 +++++++++++++++++++
 2 files changed, 42 insertions(+)

diff --git a/src/main/java/com/cloudbees/jenkins/plugins/amazonecs/ECSComputer.java b/src/main/java/com/cloudbees/jenkins/plugins/amazonecs/ECSComputer.java
index 5d6ee94..206f9ec 100644
--- a/src/main/java/com/cloudbees/jenkins/plugins/amazonecs/ECSComputer.java
+++ b/src/main/java/com/cloudbees/jenkins/plugins/amazonecs/ECSComputer.java
@@ -42,12 +42,21 @@ import hudson.slaves.AbstractCloudComputer;
 public class ECSComputer extends AbstractCloudComputer<ECSSlave> {
     private static final Logger LOGGER = Logger.getLogger(ECSComputer.class.getName());
 
+    private final ECSSlave slave;
+
     public ECSComputer(ECSSlave slave) {
         super(slave);
+        this.slave = slave;
     }
 
     @Override
     public void taskAccepted(Executor executor, Queue.Task task) {
+        if(!slave.isPermittedUrl(task.getUrl())) {
+            slave.abortBuild();
+            LOGGER.log(Level.INFO, "[{0}]: JobName: {1}", new Object[] {this.getName(), task.getDisplayName()});
+            LOGGER.log(Level.INFO, "[{0}]: JobUrl: {1}", new Object[] {this.getName(), task.getUrl()});
+            LOGGER.log(Level.INFO, "[{0}]: The job URL is not permitted in the agent's list of job prefixes", this);
+        }
         super.taskAccepted(executor, task);
         LOGGER.log(Level.INFO, "[{0}]: JobName: {1}", new Object[] {this.getName(), task.getDisplayName()});
         LOGGER.log(Level.INFO, "[{0}]: JobUrl: {1}", new Object[] {this.getName(), task.getUrl()});
diff --git a/src/main/java/com/cloudbees/jenkins/plugins/amazonecs/ECSSlave.java b/src/main/java/com/cloudbees/jenkins/plugins/amazonecs/ECSSlave.java
index 7e08089..006de11 100644
--- a/src/main/java/com/cloudbees/jenkins/plugins/amazonecs/ECSSlave.java
+++ b/src/main/java/com/cloudbees/jenkins/plugins/amazonecs/ECSSlave.java
@@ -30,6 +30,7 @@ import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.text.MessageFormat;
 import java.util.Collections;
+import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -41,6 +42,8 @@ import com.amazonaws.services.ecs.model.ClientException;
 import com.amazonaws.services.ecs.model.ClusterNotFoundException;
 import com.amazonaws.services.ecs.model.InvalidParameterException;
 import com.amazonaws.services.ecs.model.ServerException;
+import com.amazonaws.services.ecs.model.Task;
+import com.amazonaws.services.ecs.model.Tag;
 
 import org.jenkinsci.plugins.durabletask.executors.OnceRetentionStrategy;
 import hudson.model.Descriptor;
@@ -165,4 +168,34 @@ public class ECSSlave extends AbstractCloudSlave {
     private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
         stream.defaultReadObject();
     }
+
+    public boolean isPermittedUrl(String jobUrl) {
+        Task task = cloud.getEcsService().describeTask(taskArn, clusterArn);
+        List<Tag> tags = task.getTags();
+
+        boolean weHaveJobPrefixRestrictions = false;
+
+        // check the tags for ones which we want; if we match any, allow the build
+        for (Tag tag: tags) {
+            if (tag.getKey().startsWith("JENKINS_JOB_PREFIX_")) {
+                weHaveJobPrefixRestrictions = true;
+                if (jobUrl.startsWith(tag.getValue())) {
+                    return true;
+                }
+            }
+        }
+
+        // if we are here, there are tags. If any matched the prefix we
+        // want and we are here, our job isn't a match
+        if (weHaveJobPrefixRestrictions) {
+            return false;
+        }
+
+        // there are tags but not ones of interest OR there are no tags
+        return false;
+    }
+
+    public void abortBuild() {
+        cloud.getEcsService().stopTask(taskArn, clusterArn);
+    }
 }
-- 
2.30.2

